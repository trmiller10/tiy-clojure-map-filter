<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1464980221526">{:repl-history {:ide [], :local [&quot;(+ 1 1)&quot; &quot;7&quot; &quot;(7)&quot; &quot;(let [purchases (slurp \&quot;purchases.csv\&quot;)\n      ] purchases)&quot; &quot;(let [purchases (slurp \&quot;purchases.csv\&quot;)\n      purchases 423\n      ] purchases)&quot; &quot;(let [purchases (slurp \&quot;purchases.csv\&quot;)\n      purchases 423\n      purchases \&quot;Dane is watching us.\&quot;\n      ] purchases)&quot; &quot;(let [purchases (slurp \&quot;purchases.csv\&quot;)\n      purchases 423\n      purchases \&quot;Dane is watching us.\&quot;\n      purchases (+ 1 purchases)\n      ] purchases)&quot; &quot;(let [purchases (slurp \&quot;purchases.csv\&quot;)\n      purchases 423\n      purchases (+ 1 purchases)\n      ] purchases)&quot; &quot;[1 2 24]&quot; &quot;(clojure.string/capitalize \&quot;aaefwafwewf\&quot;)&quot; &quot;(clojure.string/upper-case \&quot;aaefwafwewf\&quot;)&quot; &quot;(let [purchases (slurp \&quot;purchases.csv\&quot;)\n      purchases (clojure.string/split-lines purchases)\n      ] purchases)&quot; &quot;(let [purchases (slurp \&quot;purchases.csv\&quot;)\n      purchases (str/split-lines purchases)\n      ] purchases)&quot; &quot;(doc map)&quot; &quot;(defn function [] 8)&quot; &quot;function&quot; &quot;(defn function [x] (def x 8) x)&quot; &quot;(defn function [x] x)&quot; &quot;(function)&quot; &quot;(function 8)&quot; &quot;(function \&quot;Dane is watching us.\&quot;)&quot; &quot;(defn multi [x] (* x x))&quot; &quot;(multi 3)&quot; &quot;(fn [] 8)&quot; &quot;(def deanon (fn [] 8))&quot; &quot;deanon&quot; &quot;(deanon)&quot; &quot;(def newmult (fn [x] (* x x)))&quot; &quot;(newmult 89)&quot; &quot;(map newmult [1 2 3])&quot; &quot;(&quot; &quot;(newmult 6)&quot; &quot;((fn [x] (* x x)) 8)&quot; &quot;( #(* % %) 8)&quot; &quot;( #(* %1 %2) 8 9)&quot; &quot;( #(/ %1 %2) 64 4)&quot; &quot;( #(/ %1 %2) 4 64)&quot; &quot;( #(/ %1 %2) 4.0 64)&quot; &quot;(#(+ % %) (1 2 3))&quot; &quot;(clojure.string/split \&quot;Furniture,Alcohol,Toiletries,Shoes,Food,Jewelry\&quot; #\&quot;,\&quot;)&quot; &quot;(def purchases \&quot;Furniture, Alcohol, Toiletries, Shoes, Food, Jewelry\&quot;)&quot; &quot;(map (fn [line] (str/split line #\&quot;,\&quot;)) purchases)&quot; &quot;(map (fn [line] (str/split line #\&quot;,\&quot;) purchases) purchases)&quot; &quot;(map (fn [line] (clojure.string/split line #\&quot;,\&quot;) purchases))&quot; &quot;(map (fn [line] (clojure.string/split line #\&quot;,\&quot; purchases)))&quot; &quot;(clojure.string/split line #\&quot;,\&quot; purchases)&quot; &quot;(fn [line] (clojure.string/split purchases #\&quot;,\&quot;) line)&quot; &quot;line,&quot; &quot;line&quot; &quot;(fn [line] (clojure.string/split line #\&quot;,\&quot;) purchases)&quot; &quot;(clojure.string/split purchases #\&quot;,\&quot;)&quot; &quot;(fn [line] (clojure.string/split line #\&quot;,\&quot;))&quot; &quot;((fn [line] (clojure.string/split line #\&quot;,\&quot;) purchases))&quot; &quot;((fn [line] (clojure.string/split line #\&quot;,\&quot;) purchases) purchases)&quot; &quot;((fn [line] (clojure.string/split purchases #\&quot;,\&quot;) line))&quot; &quot;(fn [line] (clojure.string/split purchases #\&quot;,\&quot;))&quot; &quot;((fn [line] (clojure.string/split line #\&quot;,\&quot;)) purchases)&quot; &quot;(def purchases [\&quot;Furniture, Alcohol, Toiletries, Shoes, Food, Jewelry\&quot; \&quot;1111, Alcohol, Toiletries, Shoes, Food, Jewelry\&quot; \&quot;2222, Alcohol, Toiletries, Shoes, Food, Jewelry\&quot;])&quot; &quot;((fn [line] (clojure.string/split line #\&quot;,\&quot;) purchases) \&quot;hi, there, how, adsasasdads\&quot;)&quot; &quot;((fn [line] (clojure.string/split line #\&quot;,\&quot;) 8) \&quot;hi, there, how, adsasasdads\&quot;)&quot; &quot;((fn [line] (clojure.string/split line #\&quot;,\&quot;) ) \&quot;hi, there, how, adsasasdads\&quot;)&quot; &quot;(map (fn [line] (clojure.string/split line #\&quot;,\&quot;) purchases) purchases)&quot; &quot;(map (fn [line] (clojure.string/split line #\&quot;,\&quot;)) purchases)&quot; &quot;(map #(clojure.string/split % #\&quot;,\&quot;) purchases)&quot; &quot;(map (#(clojure.string/split % #\&quot;,\&quot;)) purchases)&quot; &quot;headers (first purchases)\n&quot; &quot;(def headers (first purchases))\n&quot; &quot;(def purchases (rest purchases))\n&quot; &quot;[zipmap ]&quot; &quot;(zipmap [\&quot;first\&quot; \&quot;second\&quot;] [\&quot;Martha\&quot; \&quot;Jenkins\&quot;])&quot; &quot;(purchases (slurp \&quot;purchases.csv\&quot;))\n;splits purchases into vectors of lines\n(purchases (str/split-lines purchases))\n           (purchases (map (fn [line] (clojure.string/split line #\&quot;,\&quot;)) purchases))\n                      (headers (first purchases))\n                               (purchases (rest purchases))&quot; &quot;(purchases (slurp \&quot;purchases.csv\&quot;))&quot; &quot;def &quot; &quot;(def purchases (slurp \&quot;purchases.csv\&quot;))&quot; &quot;(def purchases (str/split-lines purchases))\n&quot; &quot;(def              purchases (map (fn [line] (clojure.string/split line #\&quot;,\&quot;)) purchases)\n  )&quot; &quot;(def              headers (first purchases)\n  )&quot; &quot;(             purchases (rest purchases)\n                        )&quot; &quot;(def             purchases (rest purchases)\n                        )&quot; &quot;purchases&quot; &quot;headers&quot; &quot;(first purchases)&quot; &quot;(zipmap headers (first purchases))&quot; &quot;(zipmap headers purchases)&quot; &quot;(zipmap headers (clojure.string/split-lines purchases))&quot; &quot;(map zipmap purchases)&quot; &quot;(map (zipmap purchases))&quot; &quot;(map (fn [line] (zipmap headers line)) purchases)&quot; &quot;(-main)&quot; &quot;(keyword \&quot;id\&quot;)&quot; &quot;(keyword \&quot;first_name\&quot;)&quot; &quot;(map (fn [line] (keyword line)) purchases)&quot; &quot;(map (fn [x] (+ x x)) {1 2 3 4})&quot; &quot;(map (fn [x] (keyword (first x))) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})&quot; &quot;(zipmap (map (fn [x] (keyword (first x))) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;}) (last {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})  )&quot; &quot;(last {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})&quot; &quot;(def purchases\n  (zipmap\n  (map\n    (fn [x] (keyword (first x))) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})\n  (map\n    (fn [x] (last x)) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})\n  )&quot; &quot;(def purchases\n  (zipmap\n  (map\n    (fn [x] (keyword (first x))) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})\n  (map\n    (fn [x] (last x)) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})\n  ))&quot; &quot;(zipmap\n  (map\n    (fn [x] (keyword (first x))) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})\n  (map\n    (fn [x] (last x)) {\&quot;id\&quot; \&quot;1\&quot;, \&quot;name\&quot; \&quot;Dane\&quot;})\n  )&quot; &quot;\n  (map\n    (fn [x] (keyword (first x))) purchases)\n &quot; &quot;(map (fn [x] (keyword (first x))) purchases)\n &quot;], :remote []}}</component>
</project>